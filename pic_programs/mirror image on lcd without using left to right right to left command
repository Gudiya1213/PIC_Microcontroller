
// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ  6000000

void init();    // declare a initialization function with no parameter with no return type
void lcd_cmd(unsigned char); //declare a function for lcd command which is function with parameter and no return type
void lcd_data(unsigned char);  //declare a function with parameter with no return value for lcd data
unsigned char x,cmd,data;    //variable declare
unsigned char str[14] = {"GUDIYA MAURYA"};  //initialization of a string which store hello world


void main(void) {
    init();      //calling init function
   
    for(x=0; x<13; x++)   //for loop start from 0 to 12
    {
        lcd_cmd(0x83+x); //increment address
        lcd_data(str[x]);    
    }
    
  
       
    for(x=0; x<13; x++)   //for loop start from 0 to 12
    {
        lcd_cmd(0xCD-x); //decrement address
        lcd_data(str[12-x]);    
    }
    while(1);     //infinite loop
    return;
}

void init()
{
    TRISC = 0X00; // make all the pins as output of portc
    TRISD = 0X00; //make all the pins as output of portd for data 
    lcd_cmd(0x38);
    __delay_ms(100);
    lcd_cmd(0x38);
    __delay_ms(100);
    lcd_cmd(0x38);
    __delay_ms(100);
    lcd_cmd(0x38);
    __delay_ms(100);
 //   lcd_cmd(0x06);  // display on and cursor move left
  //  __delay_ms(100);
     lcd_cmd(0x0c);    
    __delay_ms(100);
    lcd_cmd(0x01);   //clear display 
    __delay_ms(100);
    
}


void lcd_cmd(unsigned char cmd)    //function definition
{
   PORTC &= ~0X08;   //RS=1 for command line to pin no RC3 
   PORTD = cmd;
   PORTC |= 0X01;  //make RC0 enable
   __delay_ms(100);  
   PORTC &=~ 0X01;  //make RC0 disable
   __delay_ms(100);      
}

void lcd_data(unsigned char data)
{
    PORTC |= 0X08; // RS = 0 for data line 
    PORTD = data;
    PORTC |= 0X01;   //EN=1
    __delay_ms(100);  
    PORTC &=~ 0X01;   //EN=0
    __delay_ms(100);
}



